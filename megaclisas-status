#!/usr/bin/python

import os
import re
import sys
import smtplib
from email.mime.text import MIMEText

# Get command output
def getOutput(cmd):
    output = os.popen(cmd)
    lines = []
    for line in output:
        line = line.strip()
        if not re.match(r'^$', line):
            lines.append(line)
    return lines


def returnControllerNumber(output):
    for line in output:
        line = line.strip()
        if re.match(r'^Controller Count.*$', line):
            return int(line.split(':')[1].strip().strip('.'))


def returnDevices(output):
    wrapped = dict()
    deviceLables = ['Virtual Drives',
                  'Degraded',
                  'Physical Devices',
                  'Critical Disks  ',
                  'Failed Disks']

    for line in output:
        line = line.strip()
        for dlabel in deviceLables:
            if re.match(dlabel, line):
                wrapped[dlabel.strip()] = int(line.split(':')[1].strip().strip('.'))

    return wrapped


def returnControllerModel(output):
    for line in output:
        if re.match(r'^Product Name.*$', line.strip()):
            return line.split(':')[1].strip()

def returnControllerFirmware(output):
    for line in output:
        if re.match(r'^FW Package Build.*$', line.strip()):
            return line.split(':')[1].strip()


def returnArrayNumber(output):
    i = 0
    for line in output:
        if re.match(r'^Number of Virtual (Disk|Drive).*$', line.strip()):
            i = line.split(':')[1].strip()
    return i

def returnNextArrayNumber(output,curNumber):
    #Virtual Drive: 2 (Target Id: 2)
    for line in output:
        vdisk = re.match(r'^Virtual Drive: \d+ \(Target Id: (\d+)\)$', line.strip())
        if vdisk and int(vdisk.group(1)) > curNumber:
            return int(vdisk.group(1))
    return -1

def returnArrayInfo(output, controllerid, arrayid):
    _id = 'c%du%d' % (controllerid, arrayid)
    operationlinennumber = False
    linenumber = 0
    ldpdcount = 0
    spandepth = 0

    for line in output:
        line = line.strip()
        if re.match(r'Number Of Drives\s*((per span))?:.*[0-9]+$', line):
            ldpdcount = line.split(':')[1].strip()
        if re.match(r'Span Depth *:.*[0-9]+$', line):
            spandepth = line.split(':')[1].strip()
        if re.match(r'^RAID Level\s*:.*$', line):
            raidlevel = line.split(':')[1].split(',')[0].split('-')[1].strip()
            raid_type = 'RAID' + raidlevel
        if re.match(r'^Size\s*:.*$', line):
            # Size reported in MB
            if re.match(r'^.*MB$', line.split(':')[1]):
                size = line.split(':')[1].strip('MB').strip()
                size = str(int(round((float(size) / 1000)))) + 'G'
            # Size reported in TB
            elif re.match(r'^.*TB$', line.split(':')[1]):
                size = line.split(':')[1].strip('TB').strip()
                size = str(int(round((float(size) * 1000)))) + 'G'
            # Size reported in GB (default)
            else:
                size = line.split(':')[1].strip('GB').strip()
                size = str(int(round((float(size))))) + 'G'
        if re.match(r'^State\s*:.*$', line):
            state = line.split(':')[1].strip()
        if re.match(r'^Ongoing Progresses\s*:.*$', line):
            operationlinennumber = linenumber
        linenumber += 1
        if operationlinennumber:
            inprogress = output[operationlinennumber + 1]
        else:
            inprogress = 'None'

    if ldpdcount and (int(spandepth) > 1):
        ldpdcount = int(ldpdcount) * int(spandepth)
        if int(raidlevel) < 10:
            raid_type = raid_type + "0"

    return [_id, raid_type, size, state, inprogress]


def returnDiskInfo(output):
    diskid = False
    smart = False
    temp = False
    table = []
    state = 'undef'
    model = 'undef'
    for line in output:
        line = line.strip()

        if re.match(r'Slot Number:', line):
            if diskid:
                table.append([diskid, model, temp, state, smart])
                diskid = line.split(':')[1].strip()
            else:
                diskid = line.split(':')[1].strip()

        if re.match(r'Firmware state: .*$', line):
            state = line.split(':')[1].strip()
        if re.match(r'Inquiry Data: .*$', line):
            model = line.split(':')[1].strip()
            model = re.sub(' +', ' ', model)

        if re.match(r'^Drive Temperature', line):
            temp = line.split(':')[1].split()[0].strip()

        if re.match(r'Drive has flagged a S.M.A.R.T alert', line):
            smart = line.split(':')[1].strip()



    return table

def sendalert(report, to='carles.corbi@gmail.com' ):

    msg = MIMEText(report)
    msg['Subject'] = "Kimstorage disk report alert"
    msg['From'] = "kimstorage"
    msg['To'] = to

    s= smtplib.SMTP('localhost')
    s.sendmail('kimstorage', to, msg.as_string())
    s.quit()


# Adding a quick check to see if we're root, because on most cards I've tried this on
# We need root access to query
if __name__ == '__main__':

    binarypath = "/opt/MegaRAID/MegaCli/MegaCli64"
    report = ''

    if os.getenv('USER') != 'root':
        print 'You can only run this script as root or with sudo, sucks I know. Blame the RAID card'
        sys.exit(5)

    nagiosoutput = ''
    nagiosgoodarray = 0
    nagiosbadarray = 0
    nagiosgooddisk = 0
    nagiosbaddisk = 0


    # Check binary exists (and +x), if not print an error message
    # or return UNKNOWN nagios error code
    if os.path.exists(binarypath) and os.access(binarypath, os.X_OK):
        pass
    else:
        print 'Cannot find ' + binarypath + '. Please install it.'
        sys.exit(3)

    # set number of Controllers
    cmd = binarypath + ' -adpCount -NoLog'
    # output:
    # Controller Count: 2.
    output = getOutput(cmd)
    controllernumber = returnControllerNumber(output)

    bad = False

    # List available controller
    report += '-- Controller informations --\n'
    report += '-- ID | Model | Firmware\n'
    controllerid = 0
    for controllerid in range(controllernumber):

        cmd = '%s -AdpAllInfo -a%d -NoLog' % (binarypath, controllerid)
        output = getOutput(cmd)
        controllermodel = returnControllerModel(output)
        firmwareversion = returnControllerFirmware(output)
        report +=  'c%d | %s | %s\n' % (controllerid, controllermodel, firmwareversion)
        # Check  Devices Status
        report += '\n ---- Devices ---- \n'
        infodevices =  returnDevices(output)

        if infodevices['Degraded'] or infodevices['Critical Disks'] or infodevices['Failed Disks']:
            bad = True
        # write report
        for label, value in infodevices.items():
            report += ' %s\t:%d \n' % (label, value)


    report +=  '\n'
    report +=  '-- Arrays informations --\n'
    report +=  '-- ID | Type | Size | Status | InProgress\n'

    for controllerid in range(controllernumber):
        cmd = '%s -LdInfo -Lall -a%d -NoLog' % (binarypath, controllerid)
        arrayoutput = getOutput(cmd)
        arrayid = returnNextArrayNumber(arrayoutput,-1)
        cmq = '%s -LdGetNum -a%d -NoLog' % (binarypath, controllerid)
        output = getOutput(cmd)
        arraynumber = int(returnArrayNumber(output))
        for i in range(arraynumber):
            cmd = '%s -LDInfo -l%d -a%d -NoLog' % (binarypath,
                                                    arrayid, controllerid)
            output = getOutput(cmd)
            arrayinfo = returnArrayInfo(output, controllerid, arrayid)

            report += ' | '.join(arrayinfo)
            report += '\n'

            if not arrayinfo[3] == 'Optimal':
                bad = True
                nagiosbadarray += 1
            else:
                nagiosgoodarray += 1
            #arrayid += 1
            arrayid = returnNextArrayNumber(arrayoutput,arrayid)



    report +=  '\n\n-- Disks informations\n'
    report +=  '-- Slot | Model | Temperature | Status| SMART Alert|\n'


    for controllerid in range(controllernumber):
        arrayid = 0

        # cmd = '%s -LdPdInfo -a%d -NoLog' % (binarypath, controllerid)
        cmd = '%s -PDList -a%d -NoLog' % (binarypath, controllerid)
        output = getOutput(cmd)
        arraydisk = returnDiskInfo(output)

        for array in arraydisk:
            if not array[3] == 'Online' and not array[3] == 'Online, Spun Up' and not 'Hotspare, Spun down':
                bad = True
                nagiosbaddisk += 1
            else:
                nagiosgooddisk += 1

            if array[4] == 'Yes':
                bad = True
                nagiosbaddisk += 1
            else:
                nagiosgooddisk += 1

            report += 'c%dslot%s | %s | %s | %s |  %s|\n' % (controllerid, array[0],
                        array[1], array[2], array[3], array[4])


    report += '\n\n'
    # summary
    status_line = 'Arrays: OK:%d Bad:%d - Disks: OK:%d Bad:%d' % \
                (nagiosgoodarray, nagiosbadarray, nagiosgooddisk, nagiosbaddisk)


    if bad:
        report += 'RAID ERROR - \n' + status_line
        print report
        print '\nThere is at least one disk/array in a NOT OPTIMAL state.'
        sendalert(report)
        sys.exit(2)
    else:
        report += 'RAID OK - \n' + status_line
        print report
        sys.exit(1)
